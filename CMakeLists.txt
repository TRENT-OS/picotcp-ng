#
# picoTCP stack library
#
# Copyright (C) 2019-2021, HENSOLDT Cyber GmbH
#

cmake_minimum_required(VERSION 3.7.2)


#-------------------------------------------------------------------------------
function(create_pico_options_header)

    set(PICO_OPTIONS
            PICO_PORT_CUSTOM  # use pico_port.h, which we provide in folder port_os

            PICO_SUPPORT_TFTP
            #PICO_SUPPORT_AODV
            PICO_SUPPORT_ETH
            PICO_SUPPORT_IPV4
            PICO_SUPPORT_IPV4FRAG
            PICO_SUPPORT_ICMP4
            PICO_SUPPORT_PING
            PICO_SUPPORT_TCP
            PICO_SUPPORT_UDP
            #PICO_SUPPORT_MCAST
            #PICO_SUPPORT_IGMP
            #PICO_SUPPORT_MLD
            #PICO_SUPPORT_NAT
            PICO_SUPPORT_DEVLOOP
            PICO_SUPPORT_DHCPC
            #PICO_SUPPORT_DHCPD
            PICO_SUPPORT_DNS_CLIENT
            #PICO_SUPPORT_MDNS
            #PICO_SUPPORT_DNS_SD
            #PICO_SUPPORT_IPFILTER
            PICO_SUPPORT_CRC
            #PICO_SUPPORT_SLAACV4
            #PICO_SUPPORT_IPV6
            #PICO_SUPPORT_ICMP6
            #PICO_SUPPORT_IPV6FRAG
            #PICO_SUPPORT_SNTP_CLIENT
            #PICO_SUPPORT_PPP
    )

    # create a string with the config file content
    string(
        CONCAT
        PICO_OPTIONS_FILE_CONTENT
        "/* PicoTCP - Definition file - DO NOT EDIT */\n"
        "/* This file is automatically generated at compile time */\n"
        "\n"
        "#pragma once\n"
        "\n"
    )
    foreach(PICO_OPTION IN LISTS PICO_OPTIONS)
        string(APPEND PICO_OPTIONS_FILE_CONTENT "#define ${PICO_OPTION}\n")
    endforeach()

    # if the config file does not exists, we create it. Otherwise read the file
    # and compare it with what we have create above. If it's not equal, write
    # the new config from above to the fiel, overwriting the old content.
    set(PICO_WRITE_OPTIONS_FILE OFF)
    set(PICO_OPTIONS_FILE "${CMAKE_CURRENT_BINARY_DIR}/include/pico_defines.h")
    if(NOT EXISTS "${PICO_OPTIONS_FILE}")
        set(PICO_WRITE_OPTIONS_FILE ON)
    else()
        file(READ "${PICO_OPTIONS_FILE}" PICO_OPTIONS_FILE_CONTENT_EXISTING)
        if(NOT "${PICO_OPTIONS_FILE_CONTENT}" STREQUAL "${PICO_OPTIONS_FILE_CONTENT_EXISTING}")
            set(PICO_WRITE_OPTIONS_FILE ON)
        endif()
    endif()

    if(PICO_WRITE_OPTIONS_FILE)
        file(WRITE "${PICO_OPTIONS_FILE}" "${PICO_OPTIONS_FILE_CONTENT}")
    endif()

endfunction()


# create the configuration file.
# TODO: this runs unconditionally when CMake processes this file. Thus a config
#       file is created even when PicoTCP is not used at all. Find a way to
#       avoid this and only create one when PicoTCP is actually used.
create_pico_options_header()


#-------------------------------------------------------------------------------
project(picotcp C)

add_library(${PROJECT_NAME}
    STATIC
    EXCLUDE_FROM_ALL
        port_os/pico_port.c

        stack/pico_stack.c
        stack/pico_frame.c
        stack/pico_device.c
        stack/pico_protocol.c
        stack/pico_socket.c
        stack/pico_socket_multicast.c
        stack/pico_tree.c
        stack/pico_md5.c
        stack/pico_jobs.c

        #modules/pico_aodv.c
        modules/pico_arp.c
        modules/pico_dev_loop.c
        #modules/pico_dev_ppp.c
        modules/pico_dhcp_client.c
        modules/pico_dhcp_common.c
        #modules/pico_dhcp_server.c
        modules/pico_dns_client.c
        modules/pico_dns_common.c
        #modules/pico_dns_sd.c
        modules/pico_ethernet.c
        modules/pico_fragments.c
        modules/pico_hotplug_detection.c
        modules/pico_icmp4.c
        #modules/pico_icmp6.c
        #modules/pico_igmp.c
        #modules/pico_ipfilter.c
        modules/pico_ipv4.c
        #modules/pico_ipv6_nd.c
        #modules/pico_ipv6.c
        #modules/pico_mcast.c
        #modules/pico_mdns.c
        #modules/pico_mld.c
        #modules/pico_nat.c
        #modules/pico_slaacv4.c
        #modules/pico_sntp_client.c
        modules/pico_socket_tcp.c
        modules/pico_socket_udp.c
        modules/pico_strings.c
        modules/pico_tcp.c
        modules/pico_tftp.c
        modules/pico_udp.c
)

target_include_directories(${PROJECT_NAME}
    PUBLIC
        include
        modules
        ${CMAKE_CURRENT_BINARY_DIR}/include
        port_os
    PRIVATE
        include/arch

)

target_link_libraries(${PROJECT_NAME}
    muslc
    sel4
    sel4_autoconf
    lib_debug
    lib_mem
)
